---
# Given the root CA, we create a Certificate resource to tell cert-manager to
# use its root CA to create the Linkerd trust anchor certificate. NOTE: this
# certificate is still in the cert-manager namespace! That's because we
# really, really don't want its private key visible anywhere else in the
# cluster.

apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: linkerd-trust-anchor
  namespace: cert-manager
spec:
  # Set the common name of the subject. This name is set by Linkerd, and must
  # not be changed.
  commonName: root.linkerd.cluster.local

  # This is itself a CA certificate.
  isCA: true

  # It must be issued (signed) by the ClusterIssuer above.
  issuerRef:
    name: linkerd-self-signed-issuer
    kind: ClusterIssuer
    # group: cert-manager.io

  # It uses a 256-bit ECDSA private key...
  privateKey:
    algorithm: ECDSA

  # ...which will be stored in this Secret.
  secretName: linkerd-identity-trust-roots

  # Note that we didn't say anything about duration or renewal times.
  # That means that this certificate will use the defaults: it will expire
  # in 90 days, and should be renewed by the 30-day mark (and cert-manager
  # will handle that for us).

---
# Given the trust anchor certificate, we can defined a second ClusterIssuer
# that will use the Linkerd trust anchor secret to sign Linkerd issuer
# certificates.
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: linkerd-trust-anchor
spec:
  # Rather than just saying "selfSigned", we use the "ca" issuer type to tell
  # cert-manager that this issuer will use a CA certificate stored in a
  # Secret.
  ca:
    secretName: linkerd-identity-trust-roots
